name: Generate and Publish RSS Feed
on:
  schedule:
    # Run at 10:10 AM Japan time (01:10 UTC)
    - cron: '10 1 * * *'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Download JSON and Generate RSS
        run: |
          # Download the JSON file
          curl -s https://kosodate-green.mlit.go.jp/assets/data/news.json > news.json
          
          # Debug - Check JSON content
          echo "JSON content:"
          cat news.json
          
          # Get current date in RFC 2822 format for the feed
          BUILD_DATE=$(date -R)
          
          # Calculate date 14 days ago in YYYY/MM/DD format for filtering
          FOURTEEN_DAYS_AGO=$(date -d "14 days ago" +"%Y/%m/%d")
          echo "Filtering entries from ${FOURTEEN_DAYS_AGO}"
          
          # Create RSS file header
          cat > rss.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>子育てグリーン住宅支援事業 新着情報</title>
    <link>https://kosodate-green.mlit.go.jp/</link>
    <description>子育てグリーン住宅支援事業のホームページの新着情報</description>
    <language>ja-jp</language>
    <lastBuildDate>${BUILD_DATE}</lastBuildDate>
    <atom:link href="https://${GITHUB_REPOSITORY_OWNER}.github.io/Green-rss/rss.xml" rel="self" type="application/rss+xml" />
EOF
          
          # Process JSON and append items to RSS - with debugging
          echo "Processing JSON entries:"
          
          # First check if we can parse the JSON properly
          if ! jq -e '.list' news.json > /dev/null; then
            echo "Error: Could not parse JSON or 'list' field not found"
            cat news.json
            exit 1
          fi
          
          # Get entries and display for debugging
          ENTRIES=$(jq -r '.list[] | select(.date >= "'${FOURTEEN_DAYS_AGO}'") | [.id, .title, .date, .url] | @tsv' news.json)
          echo "Filtered entries:"
          echo "$ENTRIES"
          
          echo "$ENTRIES" | while IFS=$'\t' read -r id title date url; do
            echo "Processing: ID=$id, Title=$title, Date=$date, URL=$url"
            
            # Skip items with empty URL
            if [ -z "$url" ] || [ "$url" = "null" ]; then
              url="https://kosodate-green.mlit.go.jp/"
              echo "Empty URL, using default: $url"
            fi
            
            # Convert date to RFC 2822 format for RSS
            rfc_date=$(date -R -d "${date}")
            echo "Converted date: $rfc_date"
            
            # Create item entry
            cat >> rss.xml << EOF
    <item>
        <title>${title}</title>
        <link>${url}</link>
        <guid isPermaLink="false">${id}</guid>
        <pubDate>${rfc_date}</pubDate>
        <description>${title}</description>
    </item>
EOF
          done
          
          # Close RSS file
          cat >> rss.xml << EOF
</channel>
</rss>
EOF
          
          echo "Generated RSS content:"
          cat rss.xml

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Commit and push
        run: |
          git add rss.xml
          git status
          
          # Force commit even if there are no changes
          git commit -m "Update RSS feed [skip ci]" || echo "No changes to commit"
          git push || echo "No changes to push"

  deploy:
    needs: generate
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Create _headers file for correct MIME type
        run: |
          mkdir -p _site
          echo "/rss.xml" > _site/_headers
          echo "  Content-Type: application/rss+xml; charset=utf-8" >> _site/_headers
          cp rss.xml _site/ || echo "rss.xml not found"
          ls -la
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
